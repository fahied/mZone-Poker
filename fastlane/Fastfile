#!/usr/bin/ruby

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.97.2"

default_platform :ios

PROVISION_PROFILE_PATH = './fastlane/provision'

SCHEME = 'mZone Poker'
PROJECT_NAME = 'mZone Poker'
PROJECT_TESTS_NAME = "#{PROJECT_NAME}UITests"
HOME_PATH = ENV['HOME']
PACKAGE_PATH = "#{HOME_PATH}/Desktop/#{SCHEME} Package"

def prepare_sigh()

  #sign ad-hoc
  sigh(
    adhoc: true,
    output_path: PROVISION_PROFILE_PATH
    #filename: PROVISION_PROFILE_PATH
  )

  #sign app-store
  sigh(
    adhoc: false,
    output_path: PROVISION_PROFILE_PATH
    #filename: PROVISION_PROFILE_PATH
  )

end

def prepare_gym()
  #params
  time = Time.new.strftime("%Y-%m-%d %H-%M-%S")
  #versionNumber = increment_version_number
  versionNumber = get_version_number
  buildNumber = increment_build_number
  #get_build_number
  #increment_build_number
  #buildNumber = lane_context[:BUILD_NUMBER]
  contentPath = "#{PACKAGE_PATH}/#{time}"
  outputName = "#{SCHEME} #{versionNumber}(#{buildNumber})"
  archivePath = "#{contentPath}/#{outputName}"
  
  #ad-hoc
  adhocName = "AdHoc #{outputName}"
  gym(
    scheme: SCHEME,
    export_method: 'ad-hoc',
    #build_path: ARCHIVES_PATH,
    output_directory: contentPath,
    output_name: adhocName,
    archive_path: archivePath
  )

  #app-store
  appstoreName = "AppStore #{outputName}"
  gym(
    scheme: SCHEME,
    export_method: 'app-store',
    output_directory: contentPath,
    output_name: appstoreName,
    archive_path:  archivePath,
    skip_build_archive: true
  )

  #dispatch fir
  adhocIPAPath = "#{contentPath}/#{adhocName}.ipa"
  sh "fir publish \'#{adhocIPAPath}\' --token d403b8dc26aa470edbfd2844cb48399a"

  #dispatch appstore
  pilot
  #pilot(
  #  skip_submission: true,
  #  skip_waiting_for_build_processing: true
  #)

  #change name
  dSYMPathAdHoc = "#{contentPath}/#{adhocName}.app.dSYM.zip"
  dSYMPathAppStore = "#{contentPath}/#{appstoreName}.app.dSYM.zip"
  newPath = "#{contentPath}/#{outputName}.app.dSYM.zip"
  #changeName(dSYMPathAdHoc, newPath)
  #changeName(dSYMPathAppStore, newPath)
end

def changeName(oldName, newName)
  sh "mv \'#{oldName}\' \'#{newName}\'"
end

def prepare_git() 
  #branch develop
  ensure_git_branch(
    branch: 'develop'
  )

  #pull
  sh "git pull --recurse-submodules"
  sh "git submodule update --recursive"

  #branch clean
  #ensure_git_status_clean
  
end

def commit_git()

  #commit
  git_commit(
    path: ["./#{PROJECT_NAME}/info.plist", "./#{PROJECT_TESTS_NAME}/info.plist", "./#{PROJECT_NAME}.xcodeproj/project.pbxproj"],
    message: "version"
  )

  #push
  push_to_git_remote(
    remote: 'origin',
    local_branch: 'develop',
    remote_branch: 'develop',
  )
  
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    
    
  end

  desc 'package'
  lane :package do
    #update sigh
    #prepare_sigh()

    prepare_git()

    #gym
    #prepare_gym()
    
  end

  desc "ruby practise"
  lane :helloRuby do
    puts(PROVISION_PROFILE_PATH)
    puts(ARCHIVES_PATH)
  end

  desc "provision"
  lane :provision do
    produce(
      app_name: 'mZone Poker',
      app_version: '1.0'
    )
    sigh(adhoc: true)
  end

  desc "screenshot"
  lane :screenshot do
    snapshot
  end

  desc "build"
  lane :build do
    gym
  end 

  desc "upload"
  lane :upload do
    deliver
  end

  desc "upload ipa"
  lane :uploadIPA do
    deliver(
      skip_screenshots: true,
      skip_metadata: true
    )
  end

  desc "Runs all the tests"
  lane :test do
    cert
    sigh 
    gym
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym(scheme: "mZone Poker") # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :appstore1 do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "mZone Poker") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
