#!/usr/bin/ruby

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.97.2"

default_platform :ios

#app type
module AppType
  Development = 0
  Beta = 1
  Production = 2
end

#server type
module ServerType
  Local = 0
  Daily = 1
  Prepub = 2
  Production = 3
end

module ExportMethod
  AdHoc = 'ad-hoc'
  AppStore = 'app-store'
end

#constants
PROVISION_PROFILE_PATH = './fastlane/provision'

SCHEME = 'mZone Poker'
PROJECT_NAME = 'mZone Poker'
PROJECT_TESTS_NAME = "#{PROJECT_NAME}UITests"
HOME_PATH = ENV['HOME']
PACKAGE_PATH = "#{HOME_PATH}/Desktop/#{SCHEME} Package"

def prepare_sigh()

  #sign ad-hoc
  sigh(
    adhoc: true,
    output_path: PROVISION_PROFILE_PATH
    #filename: PROVISION_PROFILE_PATH
  )

  #sign app-store
  sigh(
    adhoc: false,
    output_path: PROVISION_PROFILE_PATH
    #filename: PROVISION_PROFILE_PATH
  )

end

def path_params_factor(exportMethod)
  #params
  time = Time.new.strftime("%Y-%m-%d %H-%M-%S")
  versionNumber = get_version_number
  buildNumber = increment_build_number

  #gym params
  outputDirectory = "#{PACKAGE_PATH}/#{time}"
  archiveName = "#{SCHEME} #{versionNumber}(#{buildNumber})"
  outputName = "#{exportMethod} #{archiveName}"
  archivePath = "#{outputDirectory}/#{archiveName}"


  return outputDirectory, outputName, archivePath
end

def export_package(exportMethod, appType, serverType)

  outputDirectory, outputName, archivePath = path_params_factor(exportMethod)

  ipaPath = gym(
    scheme: SCHEME,
    export_method: exportMethod,
    output_directory: outputDirectory,
    output_name: outputName,
    archive_path: archivePath,
    xcargs: "GCC_PREPROCESSOR_DEFINITIONS='YT_APP_TYPE=#{appType} YT_SERVER=#{serverType}'",
    use_legacy_build_api: true
  )

  return [ipaPath, outputDirectory, outputName, archivePath]
end

def export_adhoc(appType, serverType)
   export_package(ExportMethod::AdHoc, appType, serverType)
end

def export_appstore(appType, serverType)
  export_package(ExportMethod::AppStore, appType, serverType)
end

def export_appstore_from_archive(outputDirectory, outputName, archivePath)

  gym(
    scheme: SCHEME,
    export_method: ExportMethod::AppStore,
    output_directory: outputDirectory,
    output_name: outputName,
    archive_path:  archivePath,
    skip_build_archive: true
  )

end

def package_adhoc(appType, serverType)

  params = export_adhoc(appType, serverType)

  #upload fir
  adhocIPAPath = params[0]
  upload_fir(adhocIPAPath)

end

def package_appstore(appType, serverType)
  
  #export appstore
  params = export_appstore(appType, serverType)

  #upload appstore
  appstoreIPAPath = params[0]
  outputDirectory = params[1]
  outputName = params[2]
  archivePath = params[3]
  commitInfo = generate_commitInfo(appType, serverType)
  upload_appstore(appstoreIPAPath, commitInfo)
end

def package_All(appType, serverType)

  #export adhoc
  params = export_adhoc(appType, serverType)

  #export appstore
  outputDirectory = params[1]
  outputName = params[2]
  archivePath = params[3]
  export_appstore_from_archivePath(outputDirectory, outputName, archivePath)

  #upload fir
  adhocIPAPath = params[0]
  upload_fir(adhocIPAPath)

  #upload appstore
  appstoreIPAPath = params[0]
  commitInfo = generate_commitInfo(appType, serverType)
  upload_appstore(appstoreIPAPath, commitInfo)
end

def upload_fir(adhocIPAPath)
  sh "fir publish \'#{adhocIPAPath}\' --token d403b8dc26aa470edbfd2844cb48399a"
end

def upload_appstore(appstoreIPAPath, changelog)
  #dispatch appstore
  pilot(
    ipa: appstoreIPAPath,
    changelog: changelog,
  )
  #pilot(
  #  skip_submission: true,
  #  skip_waiting_for_build_processing: true
  #)
end

def generate_commitInfo(appType, serverType)
  scriptName = "打包脚本: xxxx\n"

  appTypeName = ""
  case appType
  when AppType::Development
    appTypeName = "应用类型: \t开发包 ApptypeDevelopment\n"
  when AppType::Beta
    appTypeName = "应用类型: \t测试包 AppTypeBeta\n"
  when AppType::Production
    appTypeName = "应用类型: \t正式包 AppTypeProduction\n"
  end

  serverName = ""
  case serverType
  when ServerType::Local
    serverName = "服务器: \t\t本地 Local\n"
  when ServerType::Daily
    serverName = "服务器: \t\t日常 Daily\n"
  when ServerType::Prepub
    serverName = "服务器: \t\t预发 Prepub\n"
  when ServerType::Production
    serverName = "服务器: \t\t线上 Production\n"
  end

  branchName = git_branch
  branchName = "当前分支: \t#{branchName}\n"

  userInfo = "打包操作: xxxx\n"
  changelog = "更新日志: \n xxxx \n"

  commitInfo = "#{scriptName}#{appTypeName}#{serverName}#{branchName}#{userInfo}#{changelog}"
end

def changeName(oldName, newName)
  sh "mv \'#{oldName}\' \'#{newName}\'"
end

def prepare_git() 
  #branch develop
  ensure_git_branch(
    branch: 'develop'
  )

  #pull
  sh "git pull --recurse-submodules"
  sh "git submodule update --recursive"

  #branch clean
  #ensure_git_status_clean
  
end

def push_commit_to_remote()

  #commit
  git_commit(
    path: ["./#{PROJECT_NAME}/Info.plist", "./#{PROJECT_TESTS_NAME}/Info.plist", "./#{PROJECT_NAME}.xcodeproj/project.pbxproj"],
    message: "version"
  )

  #push
  push_to_git_remote(
    remote: 'origin',
    local_branch: 'develop',
    remote_branch: 'develop',
  )
  
end

def checkout_changed_number
    sh "git checkout \'../#{PROJECT_NAME}/Info.plist\' \'../#{PROJECT_TESTS_NAME}/Info.plist\' \'../#{PROJECT_NAME}.xcodeproj/project.pbxproj\'"
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    
    #update sigh
    prepare_sigh()

    #update git
    prepare_git()
    
  end

  desc "deply a prepub version to adhoc"
  lane :prepub_adhoc do
    package_adhoc(AppType::Beta, ServerType::Prepub)
  end

  desc "deply a production version to adhoc"
  lane :production_adhoc do
    package_adhoc(AppType::Beta, ServerType::Production)
  end

  desc "deply a prepub version to appstore"
  lane :prepub_appstore do
    package_appstore(AppType::Production, ServerType::Prepub)
  end

  desc "deploy a production to the appstore"
  lane :production_appstore do
    package_appstore(AppType::Production, ServerType::Production)
  end

  desc "deply a prepub version for both"
  lane :package do
    package_all(AppType::Beta, ServerType::Prepub)
  end

  desc "ruby practise"
  lane :helloRuby do
    #puts(PROVISION_PROFILE_PATH)
    #puts(ARCHIVES_PATH)
    #params_factor(Export_Method::Ad_Hoc, AppType::Beta, ServerType::Prepub)
    export_package(AppType::Beta, ServerType::Prepub)
  end

  desc "provision"
  lane :provision do
    produce(
      app_name: 'mZone Poker',
      app_version: '1.0'
    )
    sigh(adhoc: true)
  end

  desc "screenshot"
  lane :screenshot do
    snapshot
  end

  desc "build"
  lane :build do
    gym
  end 

  desc "upload"
  lane :upload do
    deliver
  end

  desc "upload ipa"
  lane :uploadIPA do
    deliver(
      skip_screenshots: true,
      skip_metadata: true
    )
  end

  desc "Runs all the tests"
  lane :test do
    cert
    sigh 
    gym
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym(scheme: "mZone Poker") # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end


  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    #push
    push_commit_to_remote()

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|

    #chekcout 
    checkout_changed_number()
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
